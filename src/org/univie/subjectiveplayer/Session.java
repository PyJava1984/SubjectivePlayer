/*	This file is part of SubjectivePlayer for Android.
 *
 *	SubjectivePlayer for Android is free software: you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, either version 3 of the License, or
 *	(at your option) any later version.
 *
 *	SubjectivePlayer for Android is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with SubjectivePlayer for Android.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.univie.subjectiveplayer;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.Vector;

import android.util.Log;

/**
 * Class that stores session data for each participant
 */
public abstract class Session {

	private static final String TAG = Session.class.getSimpleName();

	/** the participant's ID */
	public static int sParticipantId = 0;

	/** the ID of the method the participant is using */
	public static int sCurrentMethod = Methods.UNDEFINED;

	/** the index of the currently playing track */
	public static int sCurrentTrack = 0;

	/** the tracks to be shown */
	public static Vector<String> sTracks = new Vector<String>();

	/** the ratings for each corresponding track */
	public static Vector<Integer> sRatings = new Vector<Integer>();

    /** the rating time for each corresponding track */
    public static Vector<Long> sRatingTime = new Vector<Long>();



    /**
	 * Tries to extract all video file names from the configuration file passed
	 * and saves them to a vector of Strings. These are just the names of the
	 * videos, not their complete paths. The path can be generated by combining
	 * it from the settings in the Configuration. Missing files will not be
	 * included in the playlist.
	 */
	public static void readVideosFromFile(File configFile) {
		try {
			if (configFile.exists() && configFile.canRead()) {

				// prepare readers
				FileInputStream fin = new FileInputStream(configFile);
				DataInputStream din = new DataInputStream(fin);
				InputStreamReader ir = new InputStreamReader(din);
				BufferedReader br = new BufferedReader(ir);

				// read from the file
				String currentLine = new String();
				while ((currentLine = br.readLine()) != null) {
					sTracks.add(currentLine);
				}

				// take care of files that can not be found, so we don't have to
				// check later (we should maybe, but yeah... TODO)
				for (int i = 0; i < sTracks.size(); i++) {
					File f = new File(Configuration.sFolderVideos, sTracks
							.get(i));
					if (!f.exists()) {
						sTracks.remove(i);
					}
				}

				// cleanup streams
				br.close();
				ir.close();
				din.close();
				fin.close();
			}
		} catch (Exception e) {
			Log.e(TAG, "Could not read Videos from file: " + e.getMessage());
		}
	}

	/**
	 * Resets the session before another round.
	 */
	public static void reset() {
		sParticipantId = 0;
		sCurrentTrack = 0;
		sCurrentMethod = Methods.UNDEFINED;
		sTracks = new Vector<String>();
		sRatings = new Vector<Integer>();
        sRatingTime = new Vector<Long>();
	}
}
